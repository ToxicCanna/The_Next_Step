//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Rampage/RampagePlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RampagePlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RampagePlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RampagePlayerInput"",
    ""maps"": [
        {
            ""name"": ""MovementRampage"",
            ""id"": ""cf599fb9-6923-48d3-a89c-5b564ba3911a"",
            ""actions"": [
                {
                    ""name"": ""GroundMove"",
                    ""type"": ""Value"",
                    ""id"": ""3bd95505-9d79-4d67-8491-7a5813a72485"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b71ead2c-c3b8-4ab0-a69e-64d703ac2fa3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left/Right"",
                    ""id"": ""a147f459-c0d6-47c9-8d78-a15135e2ece3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""c456c4af-6172-486f-a2d8-e9f4d8479d97"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""cdf5f14b-01cb-43c9-81c8-f6413d3e6ef8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MoveUp"",
                    ""id"": ""a7cd8ae3-8ba4-4f98-b58d-545c92d2f282"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ed83eded-7c6c-4a23-9a5f-b25d2d407592"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""463a2503-f664-41ce-910b-f973b0feb209"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0a6e5188-084b-417d-9f52-e55edf14776e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementRampage
        m_MovementRampage = asset.FindActionMap("MovementRampage", throwIfNotFound: true);
        m_MovementRampage_GroundMove = m_MovementRampage.FindAction("GroundMove", throwIfNotFound: true);
        m_MovementRampage_Shoot = m_MovementRampage.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementRampage
    private readonly InputActionMap m_MovementRampage;
    private List<IMovementRampageActions> m_MovementRampageActionsCallbackInterfaces = new List<IMovementRampageActions>();
    private readonly InputAction m_MovementRampage_GroundMove;
    private readonly InputAction m_MovementRampage_Shoot;
    public struct MovementRampageActions
    {
        private @RampagePlayerInput m_Wrapper;
        public MovementRampageActions(@RampagePlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @GroundMove => m_Wrapper.m_MovementRampage_GroundMove;
        public InputAction @Shoot => m_Wrapper.m_MovementRampage_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_MovementRampage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementRampageActions set) { return set.Get(); }
        public void AddCallbacks(IMovementRampageActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementRampageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementRampageActionsCallbackInterfaces.Add(instance);
            @GroundMove.started += instance.OnGroundMove;
            @GroundMove.performed += instance.OnGroundMove;
            @GroundMove.canceled += instance.OnGroundMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IMovementRampageActions instance)
        {
            @GroundMove.started -= instance.OnGroundMove;
            @GroundMove.performed -= instance.OnGroundMove;
            @GroundMove.canceled -= instance.OnGroundMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IMovementRampageActions instance)
        {
            if (m_Wrapper.m_MovementRampageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementRampageActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementRampageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementRampageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementRampageActions @MovementRampage => new MovementRampageActions(this);
    public interface IMovementRampageActions
    {
        void OnGroundMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
