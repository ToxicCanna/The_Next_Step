//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Galaga/Player/GalagaPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GalagaPlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GalagaPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GalagaPlayerInput"",
    ""maps"": [
        {
            ""name"": ""MovementGalaga"",
            ""id"": ""a82a36a4-5a3a-413c-9fd7-8fe0c87e809d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""967322f4-0961-48c3-9848-f426605182c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""487821ad-527c-41a9-b134-463cff37f1b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left/Right"",
                    ""id"": ""8cfa856b-11ab-409a-98d8-cfc2349cfafc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""8d7f35ec-a747-4d63-8f93-bb520b632d9c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""83dae100-8d3f-4c11-a3aa-dbd4a11f00b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0ae3dd16-d9d4-487b-8f70-f56957ba6e96"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementGalaga
        m_MovementGalaga = asset.FindActionMap("MovementGalaga", throwIfNotFound: true);
        m_MovementGalaga_Movement = m_MovementGalaga.FindAction("Movement", throwIfNotFound: true);
        m_MovementGalaga_Shoot = m_MovementGalaga.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementGalaga
    private readonly InputActionMap m_MovementGalaga;
    private List<IMovementGalagaActions> m_MovementGalagaActionsCallbackInterfaces = new List<IMovementGalagaActions>();
    private readonly InputAction m_MovementGalaga_Movement;
    private readonly InputAction m_MovementGalaga_Shoot;
    public struct MovementGalagaActions
    {
        private @GalagaPlayerInput m_Wrapper;
        public MovementGalagaActions(@GalagaPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementGalaga_Movement;
        public InputAction @Shoot => m_Wrapper.m_MovementGalaga_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_MovementGalaga; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementGalagaActions set) { return set.Get(); }
        public void AddCallbacks(IMovementGalagaActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementGalagaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementGalagaActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IMovementGalagaActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IMovementGalagaActions instance)
        {
            if (m_Wrapper.m_MovementGalagaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementGalagaActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementGalagaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementGalagaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementGalagaActions @MovementGalaga => new MovementGalagaActions(this);
    public interface IMovementGalagaActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
